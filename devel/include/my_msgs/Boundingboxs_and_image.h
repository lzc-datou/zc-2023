// Generated by gencpp from file my_msgs/Boundingboxs_and_image.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_BOUNDINGBOXS_AND_IMAGE_H
#define MY_MSGS_MESSAGE_BOUNDINGBOXS_AND_IMAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <my_msgs/Bounding_box.h>
#include <sensor_msgs/Image.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct Boundingboxs_and_image_
{
  typedef Boundingboxs_and_image_<ContainerAllocator> Type;

  Boundingboxs_and_image_()
    : header()
    , bounding_boxs()
    , image_list()  {
    }
  Boundingboxs_and_image_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bounding_boxs(_alloc)
    , image_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::my_msgs::Bounding_box_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::my_msgs::Bounding_box_<ContainerAllocator> >> _bounding_boxs_type;
  _bounding_boxs_type bounding_boxs;

   typedef std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sensor_msgs::Image_<ContainerAllocator> >> _image_list_type;
  _image_list_type image_list;





  typedef boost::shared_ptr< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> const> ConstPtr;

}; // struct Boundingboxs_and_image_

typedef ::my_msgs::Boundingboxs_and_image_<std::allocator<void> > Boundingboxs_and_image;

typedef boost::shared_ptr< ::my_msgs::Boundingboxs_and_image > Boundingboxs_and_imagePtr;
typedef boost::shared_ptr< ::my_msgs::Boundingboxs_and_image const> Boundingboxs_and_imageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator1> & lhs, const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.bounding_boxs == rhs.bounding_boxs &&
    lhs.image_list == rhs.image_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator1> & lhs, const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b8d6383478d3cb0299e85875bbaf9e11";
  }

  static const char* value(const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb8d6383478d3cb02ULL;
  static const uint64_t static_value2 = 0x99e85875bbaf9e11ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Boundingboxs_and_image";
  }

  static const char* value(const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 消息说明\n"
"# header: Header类型 包含三个元素 [stamp(时间戳)  frame_id(string类型,坐标系名称) seq(int类型, 序列号)]\n"
"# bounding_boxs: Bounding_box列表类型,用于存储多个Bounding_box（一张图片中可能存在多个靶标）\n"
"# sensor_msgs/Image[] image_list   储存yolov5框出的靶标图片(多张图片）。\n"
"# 注意：这里bounding_boxs索引和image_list索引是对应的\n"
"\n"
"\n"
"Header header\n"
"Bounding_box[] bounding_boxs\n"
"sensor_msgs/Image[] image_list\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: my_msgs/Bounding_box\n"
"# 消息说明\n"
"# Class 类别名  (大写原因是为了避开class关键字)\n"
"# conf 置信度\n"
"# x1 Bounding_box的左上角横坐标\n"
"# y1 Bounding_box的左上角纵坐标\n"
"# x2 Bounding_box的右下角横坐标\n"
"# y2 Bounding_box的右下角纵坐标\n"
"\n"
"string Class\n"
"float32 conf\n"
"int64 x1\n"
"int64 y1\n"
"int64 x2\n"
"int64 y2\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bounding_boxs);
      stream.next(m.image_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Boundingboxs_and_image_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Boundingboxs_and_image_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Boundingboxs_and_image_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bounding_boxs[]" << std::endl;
    for (size_t i = 0; i < v.bounding_boxs.size(); ++i)
    {
      s << indent << "  bounding_boxs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::my_msgs::Bounding_box_<ContainerAllocator> >::stream(s, indent + "    ", v.bounding_boxs[i]);
    }
    s << indent << "image_list[]" << std::endl;
    for (size_t i = 0; i < v.image_list.size(); ++i)
    {
      s << indent << "  image_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "    ", v.image_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_BOUNDINGBOXS_AND_IMAGE_H
