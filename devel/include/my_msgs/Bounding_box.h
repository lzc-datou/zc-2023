// Generated by gencpp from file my_msgs/Bounding_box.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_BOUNDING_BOX_H
#define MY_MSGS_MESSAGE_BOUNDING_BOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Bounding_box_
{
  typedef Bounding_box_<ContainerAllocator> Type;

  Bounding_box_()
    : Class()
    , conf(0.0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
    }
  Bounding_box_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , conf(0.0)
    , x1(0)
    , y1(0)
    , x2(0)
    , y2(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Class_type;
  _Class_type Class;

   typedef float _conf_type;
  _conf_type conf;

   typedef int64_t _x1_type;
  _x1_type x1;

   typedef int64_t _y1_type;
  _y1_type y1;

   typedef int64_t _x2_type;
  _x2_type x2;

   typedef int64_t _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::my_msgs::Bounding_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Bounding_box_<ContainerAllocator> const> ConstPtr;

}; // struct Bounding_box_

typedef ::my_msgs::Bounding_box_<std::allocator<void> > Bounding_box;

typedef boost::shared_ptr< ::my_msgs::Bounding_box > Bounding_boxPtr;
typedef boost::shared_ptr< ::my_msgs::Bounding_box const> Bounding_boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Bounding_box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Bounding_box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::Bounding_box_<ContainerAllocator1> & lhs, const ::my_msgs::Bounding_box_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.conf == rhs.conf &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::Bounding_box_<ContainerAllocator1> & lhs, const ::my_msgs::Bounding_box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Bounding_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Bounding_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Bounding_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Bounding_box_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Bounding_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Bounding_box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "963f940de3c1365ed4d3926e5efc6c5f";
  }

  static const char* value(const ::my_msgs::Bounding_box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x963f940de3c1365eULL;
  static const uint64_t static_value2 = 0xd4d3926e5efc6c5fULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Bounding_box";
  }

  static const char* value(const ::my_msgs::Bounding_box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Bounding_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 消息说明\n"
"# Class 类别名  (大写原因是为了避开class关键字)\n"
"# conf 置信度\n"
"# x1 Bounding_box的左上角横坐标\n"
"# y1 Bounding_box的左上角纵坐标\n"
"# x2 Bounding_box的右下角横坐标\n"
"# y2 Bounding_box的右下角纵坐标\n"
"\n"
"string Class\n"
"float32 conf\n"
"int64 x1\n"
"int64 y1\n"
"int64 x2\n"
"int64 y2\n"
;
  }

  static const char* value(const ::my_msgs::Bounding_box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Bounding_box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.conf);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bounding_box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Bounding_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Bounding_box_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Class);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "x1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_BOUNDING_BOX_H
